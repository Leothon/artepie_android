package com.leothon.cogito.DataBase;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.leothon.cogito.GreenDao.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ENTITY".
*/
public class UserEntityDao extends AbstractDao<UserEntity, String> {

    public static final String TABLENAME = "USER_ENTITY";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, String.class, "user_id", true, "USER_ID");
        public final static Property User_name = new Property(1, String.class, "user_name", false, "USER_NAME");
        public final static Property User_icon = new Property(2, String.class, "user_icon", false, "USER_ICON");
        public final static Property User_birth = new Property(3, String.class, "user_birth", false, "USER_BIRTH");
        public final static Property User_sex = new Property(4, int.class, "user_sex", false, "USER_SEX");
        public final static Property User_signal = new Property(5, String.class, "user_signal", false, "USER_SIGNAL");
        public final static Property User_address = new Property(6, String.class, "user_address", false, "USER_ADDRESS");
        public final static Property User_password = new Property(7, String.class, "user_password", false, "USER_PASSWORD");
        public final static Property User_token = new Property(8, String.class, "user_token", false, "USER_TOKEN");
        public final static Property User_status = new Property(9, String.class, "user_status", false, "USER_STATUS");
        public final static Property User_register_time = new Property(10, String.class, "user_register_time", false, "USER_REGISTER_TIME");
        public final static Property User_register_ip = new Property(11, String.class, "user_register_ip", false, "USER_REGISTER_IP");
        public final static Property User_lastlogin_time = new Property(12, String.class, "user_lastlogin_time", false, "USER_LASTLOGIN_TIME");
        public final static Property User_phone = new Property(13, String.class, "user_phone", false, "USER_PHONE");
        public final static Property User_role = new Property(14, String.class, "user_role", false, "USER_ROLE");
        public final static Property User_balance = new Property(15, String.class, "user_balance", false, "USER_BALANCE");
        public final static Property User_art_coin = new Property(16, String.class, "user_art_coin", false, "USER_ART_COIN");
    }


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ENTITY\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: user_id
                "\"USER_NAME\" TEXT," + // 1: user_name
                "\"USER_ICON\" TEXT," + // 2: user_icon
                "\"USER_BIRTH\" TEXT," + // 3: user_birth
                "\"USER_SEX\" INTEGER NOT NULL ," + // 4: user_sex
                "\"USER_SIGNAL\" TEXT," + // 5: user_signal
                "\"USER_ADDRESS\" TEXT," + // 6: user_address
                "\"USER_PASSWORD\" TEXT," + // 7: user_password
                "\"USER_TOKEN\" TEXT," + // 8: user_token
                "\"USER_STATUS\" TEXT," + // 9: user_status
                "\"USER_REGISTER_TIME\" TEXT," + // 10: user_register_time
                "\"USER_REGISTER_IP\" TEXT," + // 11: user_register_ip
                "\"USER_LASTLOGIN_TIME\" TEXT," + // 12: user_lastlogin_time
                "\"USER_PHONE\" TEXT," + // 13: user_phone
                "\"USER_ROLE\" TEXT," + // 14: user_role
                "\"USER_BALANCE\" TEXT," + // 15: user_balance
                "\"USER_ART_COIN\" TEXT);"); // 16: user_art_coin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
 
        String user_icon = entity.getUser_icon();
        if (user_icon != null) {
            stmt.bindString(3, user_icon);
        }
 
        String user_birth = entity.getUser_birth();
        if (user_birth != null) {
            stmt.bindString(4, user_birth);
        }
        stmt.bindLong(5, entity.getUser_sex());
 
        String user_signal = entity.getUser_signal();
        if (user_signal != null) {
            stmt.bindString(6, user_signal);
        }
 
        String user_address = entity.getUser_address();
        if (user_address != null) {
            stmt.bindString(7, user_address);
        }
 
        String user_password = entity.getUser_password();
        if (user_password != null) {
            stmt.bindString(8, user_password);
        }
 
        String user_token = entity.getUser_token();
        if (user_token != null) {
            stmt.bindString(9, user_token);
        }
 
        String user_status = entity.getUser_status();
        if (user_status != null) {
            stmt.bindString(10, user_status);
        }
 
        String user_register_time = entity.getUser_register_time();
        if (user_register_time != null) {
            stmt.bindString(11, user_register_time);
        }
 
        String user_register_ip = entity.getUser_register_ip();
        if (user_register_ip != null) {
            stmt.bindString(12, user_register_ip);
        }
 
        String user_lastlogin_time = entity.getUser_lastlogin_time();
        if (user_lastlogin_time != null) {
            stmt.bindString(13, user_lastlogin_time);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(14, user_phone);
        }
 
        String user_role = entity.getUser_role();
        if (user_role != null) {
            stmt.bindString(15, user_role);
        }
 
        String user_balance = entity.getUser_balance();
        if (user_balance != null) {
            stmt.bindString(16, user_balance);
        }
 
        String user_art_coin = entity.getUser_art_coin();
        if (user_art_coin != null) {
            stmt.bindString(17, user_art_coin);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
 
        String user_icon = entity.getUser_icon();
        if (user_icon != null) {
            stmt.bindString(3, user_icon);
        }
 
        String user_birth = entity.getUser_birth();
        if (user_birth != null) {
            stmt.bindString(4, user_birth);
        }
        stmt.bindLong(5, entity.getUser_sex());
 
        String user_signal = entity.getUser_signal();
        if (user_signal != null) {
            stmt.bindString(6, user_signal);
        }
 
        String user_address = entity.getUser_address();
        if (user_address != null) {
            stmt.bindString(7, user_address);
        }
 
        String user_password = entity.getUser_password();
        if (user_password != null) {
            stmt.bindString(8, user_password);
        }
 
        String user_token = entity.getUser_token();
        if (user_token != null) {
            stmt.bindString(9, user_token);
        }
 
        String user_status = entity.getUser_status();
        if (user_status != null) {
            stmt.bindString(10, user_status);
        }
 
        String user_register_time = entity.getUser_register_time();
        if (user_register_time != null) {
            stmt.bindString(11, user_register_time);
        }
 
        String user_register_ip = entity.getUser_register_ip();
        if (user_register_ip != null) {
            stmt.bindString(12, user_register_ip);
        }
 
        String user_lastlogin_time = entity.getUser_lastlogin_time();
        if (user_lastlogin_time != null) {
            stmt.bindString(13, user_lastlogin_time);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(14, user_phone);
        }
 
        String user_role = entity.getUser_role();
        if (user_role != null) {
            stmt.bindString(15, user_role);
        }
 
        String user_balance = entity.getUser_balance();
        if (user_balance != null) {
            stmt.bindString(16, user_balance);
        }
 
        String user_art_coin = entity.getUser_art_coin();
        if (user_art_coin != null) {
            stmt.bindString(17, user_art_coin);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_icon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_birth
            cursor.getInt(offset + 4), // user_sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_signal
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // user_address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_password
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // user_token
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // user_status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // user_register_time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // user_register_ip
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // user_lastlogin_time
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // user_phone
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // user_role
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // user_balance
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // user_art_coin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_icon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_birth(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_sex(cursor.getInt(offset + 4));
        entity.setUser_signal(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_address(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_password(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUser_token(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUser_status(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUser_register_time(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUser_register_ip(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUser_lastlogin_time(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUser_phone(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUser_role(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUser_balance(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUser_art_coin(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserEntity entity, long rowId) {
        return entity.getUser_id();
    }
    
    @Override
    public String getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserEntity entity) {
        return entity.getUser_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
